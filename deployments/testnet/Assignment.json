{
  "address": "0x9A383738Adb81486c43A6ab38F551AC679c98404",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PARAMS",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "M",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3fcb0b7ddc4adbdc36703865058626e752af895aea6200755c1c80d4733c30ff",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0x9A383738Adb81486c43A6ab38F551AC679c98404",
    "transactionIndex": 2,
    "gasUsed": "450151",
    "logsBloom": "0x
    "blockHash": "0xff9d5f12b61178b2727cbe462a1b4e8d3fe13ae468478d9ba7c4af64800125ff",
    "transactionHash": "0x3fcb0b7ddc4adbdc36703865058626e752af895aea6200755c1c80d4733c30ff",
    "logs": [],
    "blockNumber": 19255966,
    "cumulativeGasUsed": "1446899",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc8d5b1859b94893183c865f7c1681fb",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEFAULT_PARAMS\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"M\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Assignment.sol\":\"Assignment\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/Assignment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract Assignment {\\n    using SafeMath for uint256;\\n\\n    bytes public constant DEFAULT_PARAMS = hex'000900080007000000000000000000000000000000000000dEaD00060005';\\n\\n    constructor() public {}\\n\\n    function M(bytes memory params) external pure returns (uint256,uint256,uint256,address,uint256,uint256) {\\n        if (params.length == 0) {\\n            params = DEFAULT_PARAMS;\\n        }\\n        uint256 value = 0;\\n        assembly {\\n            value := mload(add(params, 0x1E))\\n        }\\n\\n        uint16 p1 = uint16((value >> 224) & 0xFFFF);\\n        uint16 p2 = uint16((value >> 208) & 0xFFFF);\\n        uint16 p3 = uint16((value >> 192) & 0xFFFF);\\n        address p4 = address(value >> 32);\\n        uint16 p5 = uint16((value >> 16) & 0xFFFF);\\n        uint16 p6 = uint16(value & 0xFFFF);\\n\\n        require(p1 > 0 && p1 < 10000, \\\"invalid p1\\\");\\n        require(p2 > 0 && p2 < 10000, \\\"invalid p2\\\");\\n        require(p3 > 0 && p3 < 10000, \\\"invalid p3\\\");\\n        require(p4 != address(0), \\\"invalid p4\\\");\\n        require(p5 > 0 && p5 < 10000, \\\"invalid p5\\\");\\n        require(p6 > 0 && p6 < 10000, \\\"invalid p6\\\");\\n\\n        return (\\n            uint256(p1).mul(1e14),\\n            uint256(p2).mul(1e14),\\n            uint256(p3).add(1e4).mul(1e14),\\n            p4,\\n            uint256(p5).mul(1e14),\\n            uint256(p6).add(1e4).mul(1e14)\\n        );\\n    }\\n\\n}\",\"keccak256\":\"0xb35bb29798d1c030aeb8216898d23ec7de7940262e21dd9c07a6877ac19e00b1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610744806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633f9e564b1461003b5780634242b375146100b8575b600080fd5b6100436101a6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561007d578181015183820152602001610065565b50505050905090810190601f1680156100aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61015e600480360360208110156100ce57600080fd5b8101906020810181356401000000008111156100e957600080fd5b8201836020820111156100fb57600080fd5b8035906020019184600183028401116401000000008311171561011d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506101de945050505050565b6040805196875260208701959095528585019390935273ffffffffffffffffffffffffffffffffffffffff9091166060850152608084015260a0830152519081900360c00190f35b6040518060400160405280601e81526020017e0900080007000000000000000000000000000000000000dead00060005000081525081565b600080600080600080865160001415610229576040518060400160405280601e81526020017e0900080007000000000000000000000000000000000000dead00060005000081525096505b601e87015161ffff60e082901c81169060d083901c81169060c084901c811690602085901c90601086901c8116908616851580159061026d57506127108661ffff16105b6102d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703100000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008561ffff161180156102f157506127108561ffff16105b61035c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703200000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008461ffff1611801561037557506127108461ffff16105b6103e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703300000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831661046257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008261ffff1611801561047b57506127108261ffff16105b6104e657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703500000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008161ffff161180156104ff57506127108161ffff16105b61056a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703600000000000000000000000000000000000000000000604482015290519081900360640190fd5b61057e61ffff8716655af3107a40006105fd565b61059261ffff8716655af3107a40006105fd565b6105b2655af3107a40006105ac61ffff8916612710610679565b906105fd565b856105c761ffff8716655af3107a40006105fd565b6105e1655af3107a40006105ac61ffff8916612710610679565b9c509c509c509c509c509c505050505050505091939550919395565b60008261060c57506000610673565b8282028284828161061957fe5b0414610670576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806106ee6021913960400191505060405180910390fd5b90505b92915050565b60008282018381101561067057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220579aacc459427820af9cbcd1c41b98920817ec9e10a043b7a46fd0c7ce867bc364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80633f9e564b1461003b5780634242b375146100b8575b600080fd5b6100436101a6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561007d578181015183820152602001610065565b50505050905090810190601f1680156100aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61015e600480360360208110156100ce57600080fd5b8101906020810181356401000000008111156100e957600080fd5b8201836020820111156100fb57600080fd5b8035906020019184600183028401116401000000008311171561011d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506101de945050505050565b6040805196875260208701959095528585019390935273ffffffffffffffffffffffffffffffffffffffff9091166060850152608084015260a0830152519081900360c00190f35b6040518060400160405280601e81526020017e0900080007000000000000000000000000000000000000dead00060005000081525081565b600080600080600080865160001415610229576040518060400160405280601e81526020017e0900080007000000000000000000000000000000000000dead00060005000081525096505b601e87015161ffff60e082901c81169060d083901c81169060c084901c811690602085901c90601086901c8116908616851580159061026d57506127108661ffff16105b6102d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703100000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008561ffff161180156102f157506127108561ffff16105b61035c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703200000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008461ffff1611801561037557506127108461ffff16105b6103e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703300000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831661046257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008261ffff1611801561047b57506127108261ffff16105b6104e657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703500000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008161ffff161180156104ff57506127108161ffff16105b61056a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f696e76616c696420703600000000000000000000000000000000000000000000604482015290519081900360640190fd5b61057e61ffff8716655af3107a40006105fd565b61059261ffff8716655af3107a40006105fd565b6105b2655af3107a40006105ac61ffff8916612710610679565b906105fd565b856105c761ffff8716655af3107a40006105fd565b6105e1655af3107a40006105ac61ffff8916612710610679565b9c509c509c509c509c509c505050505050505091939550919395565b60008261060c57506000610673565b8282028284828161061957fe5b0414610670576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806106ee6021913960400191505060405180910390fd5b90505b92915050565b60008282018381101561067057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220579aacc459427820af9cbcd1c41b98920817ec9e10a043b7a46fd0c7ce867bc364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}